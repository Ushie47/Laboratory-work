%include 'in_out.asm'

SECTION .data
msg_function db "Функция: f(x) = 2x + 15", 0
msg db "Результат: ", 0

SECTION .text
global _start

_start:
    ; Извлекаем из стека количество аргументов
    pop ecx               ; Количество аргументов в ecx
    pop edx               ; Имя программы (пропускаем)
    sub ecx, 1            ; Уменьшаем ecx на 1 (исключаем имя программы)

    mov esi, 0            ; Инициализация суммы (0)

next:
    cmp ecx, 0            ; Проверяем, есть ли еще аргументы
    jz _end               ; Если аргументов нет, выходим из цикла

    pop eax               ; Извлекаем следующий аргумент из стека
    call atoi             ; Преобразуем символы в число (результат в eax)

    ; f(x) = 2x + 15
    shl eax, 1            ; eax = 2x (умножаем x на 2)
    add eax, 15           ; eax = 2x + 15

    ; Добавляем результат f(x) к промежуточной сумме
    add esi, eax          ; esi = esi + f(x)

    loop next             ; Переходим к обработке следующего аргумента

_end:
    ; Выводим результат
    mov eax, msg          ; Адрес сообщения "Результат: "
    call sprint           ; Выводим сообщение

    mov eax, esi          ; Загружаем итоговую сумму в eax
    call iprintLF         ; Печатаем результат с переводом строки

    call quit             ; Завершаем программу
